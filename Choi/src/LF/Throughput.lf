/*
 * Copyright (C) 2022 TU Dresden and UC Berkeley
 * 
 * @author Wonseo Choi
 */

 target TypeScript {
    fast: true
};

import BenchmarkRunner from "BenchmarkRunner.lf";

reactor ThroughputReactor(totalMessages:number(10000)) {
    
    preamble {=
        function performComputation(theta: number): void {
            const sint = sin(theta);
            
            volatile double res = sint * sint;
        }
    =}
    
    input inMessage:boolean;
            
    reaction(inMessage) {=
        performComputation(37.2);
    =}
}


reactor ThroughputProducer(totalMessages:number(10000), numConsumer:number(60)) {
    
    state sent_messages: number(0);
    
    input start:boolean;
    output outMessage:boolean;
    output finished:boolean;

    logical action send_next_msg;
    
    reaction(start, send_next_msg) -> outMessage, finished {=
        outMessage = true;
        ++sent_messages;
        
        if (sent_messages == totalMessages) {

            sent_messages = 0;
            finished = true;
        }

        actions.send_next_msg.schedule(0, null);
    =}
}

main reactor (numIterations:number(12), numMessagesPerReactor:number(100), numWorkers:number(60)) {

    runner = new BenchmarkRunner(num_iterations=numIterations);
    producer = new ThroughputProducer(totalMessages=numMessagesPerReactor, numConsumer=numWorkers);
    worker = new[numWorkers] ThroughputReactor(totalMessages=numMessagesPerReactor);

    reaction (startup) {=
        console.log("Start Throughput LF Benchmark!");
    =}

    runner.start -> producer.start;
    (producer.outMessage)+ -> worker.inMessage;
    producer.finished -> runner.finish;
}
