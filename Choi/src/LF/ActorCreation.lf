/*
 * Copyright (C) 2022 Hanyang University
 * 
 * @author Wonseo Choi
 */
 

 target TypeScript {
     fast: true
};

import BenchmarkRunner from "BenchmarkRunner.lf";

reactor ReactorCreator(numReactor:number(60)) {

    preamble {=
        function performComputation(theta: number): void {
            const sint: number = Math.sin(theta);
            
            const res: number = sint * sint;
        }
    =}

    input start: boolean;
    input inMessage: boolean;
    output outMessage: boolean;
    output finished: boolean;

    state createReactor: number(0);
    
    logical action sendNextMessage;

    reaction (start) -> sendNextMessage {=
        actions.sendNextMessage.schedule(0, null);
    =}

    reaction(inMessage) {=
        
        performComputation(37.2);
    =}

    mutation (sendNextMessage) -> inMessage, outMessage, finished {=
        ++ createReactor;
        inMessage = true;
        if (createReactor == numReactor) {
            finished = true;  
        } else {
            let newReactor = new ReactorCreator(this.getReactor(), sendNextMessage, numReactor);
            var outPort = __outMessage.getPort();
            this.connect(outPort, n.sendNextMessage);
        }        
    =}
}

main reactor ActorCreation(numIterations:number(12), numReactor:number(60)) {
    
    runner = new BenchmarkRunner(num_iterations=numIterations);
    creater = new ReactorCreator(numReactor=numReactor);

    reaction (startup) {=
        console.log("Start Actor Creation LF Benchmark!");
    =}

    runner.start -> creater.start;
    creater.finished -> runner.finish;

}