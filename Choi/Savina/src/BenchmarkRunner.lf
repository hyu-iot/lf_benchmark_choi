target TypeScript;

/*
 *
 * Copyright (C) 2022 Hanyang University
 *
 * @author Wonseo Choi
 */

reactor BenchmarkRunner(numIterations:number(12)) {

    output start:boolean;
    input finish:boolean;
    
    logical action nextIteration:boolean;
    logical action done:boolean;
    
    state count:number(0);
    
    /** Start time for runtime measurement. */
    state startTime:time;
    
    /** Runtime measurements. */
    state measuredTimes: {=Array<number>=}({= [] =});
    
    
    reaction(startup) -> nextIteration {=
        // measuredTimes.length = numIterations;
        actions.nextIteration.schedule(0, true);
        
        console.log("Benchmark will run " + numIterations + " times \n");
        console.log("System information:")
        console.log(`Platform: ${process.platform} \n`)
    =}
    
    reaction(nextIteration) -> start {=
        startTime = util.getCurrentPhysicalTime();
        start = true;
    =}
    
    reaction(finish) -> nextIteration, done {=
        const duration = util.getCurrentPhysicalTime().subtract(startTime as TimeValue);
        measuredTimes.push(duration.toMilliseconds());
        ++count;
        
        console.log("Iteration "+ count + " - " + duration.toMilliseconds() + " ms\n");
        
        if (count < numIterations) {
            actions.nextIteration.schedule(0, true);
        } else {
            actions.done.schedule(0, true);
        }        
    =}
    
    reaction(done) {=        
        measuredTimes.sort()
        
        console.log("Execution - Summary:\n");
        console.log("Best Time:\t " + measuredTimes[0] + " msec\n");
        console.log("Worst Time:\t " + measuredTimes[numIterations - 1] + " msec\n");
        console.log("Median Time:\t " + median(measuredTimes, numIterations) + " msec\n");
        
        util.requestStop();
    =}
    
    preamble {=
        function median(execTimes: Array<number>, size: number): number {
            if (size == 0) {
                return 0.0;
            }

            const middle = size / 2;

            if(size % 2 == 1){
                return execTimes[middle]
            } else {
                return (execTimes[middle-1] + execTimes[middle]) / 2;
            }
        }
    =}

}
